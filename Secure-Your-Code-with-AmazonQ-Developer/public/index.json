[
{
	"uri": "//localhost:1313/",
	"title": "Secure Your Code With Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "Secure Your Code With Amazon Q Developer Quick Summary After completing the Getting Started with Amazon Q Developer workshop and mastering the basic features, you will continue with this workshop to explore how to use Amazon Q Developer to enhance security and improve code quality on AWS. In this workshop, you will be guided through environment setup, real-time security scanning and vulnerability detection, receiving remediation recommendations, automated code reviews, and applying international security best practices to your projects.\nDuration Approximately 2 hours, including environment setup and hands-on practice.\nTarget Audience Application Developers Cybersecurity Professionals Anyone interested in Secure Coding Practices Prerequisite Knowledge Basic knowledge of Python to understand code samples and the impact of security vulnerabilities General understanding of the OWASP Top Ten will help you better grasp the vulnerabilities in the code samples Cost This workshop uses the Amazon Q Developer Free Tier, which provides vulnerability scanning features with a limit of 50 interactions per month. This is a significant advantage as you can fully experience the features without incurring any costs.\nFigure 1: Improve reliability and security with Amazon Q Developer\n"
},
{
	"uri": "//localhost:1313/3-prompt-library/1-create-vulnerable-code-samples/",
	"title": "Create Vulnerable Code Samples",
	"tags": [],
	"description": "",
	"content": "To practice with Amazon Q Developer security scanning, we\u0026rsquo;ll create code files containing common security vulnerabilities. These files will be used to test various security prompts in our library.\nSetup Test Environment 1. Create a new directory for security testing:\nmkdir security-test\rcd security-test 2. Create the vulnerable code files as instructed below.\nCreate Vulnerable App File name: vulnerable_app.py\nThis file contains 3 main vulnerability types in a Flask web application:\nimport sqlite3\rimport os\rimport subprocess\rfrom flask import Flask, request, redirect\rapp = Flask(**name**)\r# SQL Injection vulnerability\rdef get_user(username):\rconn = sqlite3.connect(\u0026#39;users.db\u0026#39;)\rquery = f\u0026#34;SELECT * FROM users WHERE username = \u0026#39;{username}\u0026#39;\u0026#34;\rcursor = conn.execute(query)\rreturn cursor.fetchone()\r# Open Redirect vulnerability\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_user():\rurl = request.args.get(\u0026#39;url\u0026#39;)\rreturn redirect(url)\r# Command Injection vulnerability\r@app.route(\u0026#39;/ping\u0026#39;)\rdef ping_host():\rhost = request.args.get(\u0026#39;host\u0026#39;)\rresult = subprocess.run(f\u0026#39;ping -c 1 {host}\u0026#39;, shell=True, capture_output=True)\rreturn result.stdout Vulnerabilities in this file:\nSQL Injection - String concatenation in query Open Redirect - No URL validation before redirect Command Injection - Unsafe shell execution Create File Handler File name: file_handler.py\nThis file demonstrates vulnerabilities related to file operations and credential management:\nimport os\r# Path Traversal vulnerability\rdef read_file(filename):\rfile_path = f\u0026#34;/app/uploads/{filename}\u0026#34;\rwith open(file_path, \u0026#39;r\u0026#39;) as f:\rreturn f.read()\r# Credential Exposure vulnerability\rdef connect_database():\rDB_PASSWORD = \u0026#34;admin123\u0026#34;\rconnection_string = f\u0026#34;postgresql://user:{DB_PASSWORD}@localhost/mydb\u0026#34;\rprint(f\u0026#34;Connecting to: {connection_string}\u0026#34;)\rreturn connection_string Vulnerabilities in this file:\nPath Traversal - No filename input sanitization Credential Exposure - Hardcoded password and credential logging Create Auth Service File name: auth_service.py\nThis file contains privilege escalation and credential management vulnerabilities:\n# Privilege Escalation vulnerability\rdef check_admin_access(user_id):\rif user_id:\rreturn True # Missing proper role check\rreturn False\rdef delete_user(current_user, target_user_id):\rif check_admin_access(current_user.id):\rreturn f\u0026#34;User {target_user_id} deleted\u0026#34;\rreturn \u0026#34;Access denied\u0026#34;\r# Hardcoded API key\rAPI_KEY = \u0026#34;sk-1234567890abcdef\u0026#34; Vulnerabilities in this file:\nPrivilege Escalation - Weak access control logic Credential Exposure - Hardcoded API key These files will be used in subsequent labs to test different security prompts.\n"
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction to Secure Code With Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "Introduction to Secure Code With Amazon Q Developer Welcome to the \u0026ldquo;Secure Your Code With Amazon Q Developer\u0026rdquo; Workshop! This is a hands-on session on source code security using AI with Amazon Q Developer—a conversational AI assistant that helps you understand, build, and secure AWS applications effectively[1][2].\nAmazon Q Developer not only supports code completion but can also scan your source code, detect and suggest fixes for security vulnerabilities, update, debug, and optimize your code[1][3].\nWorkshop Objectives This workshop focuses on the Security Scanning (/review) feature of Amazon Q Developer to detect security policy violations and vulnerabilities in your source code, thereby improving overall security quality[1][4]. Amazon Q Developer uses Static Application Security Testing (SAST), secrets detection, software composition analysis and Infrastructure as Code (IaC) scanning to identify security issues[5][6][7].\nThis tool is powered by the Amazon CodeGuru Detector Library with thousands of security detectors across various programming languages[1][8]. As security policies are updated and new detectors are added, Amazon Q automatically integrates them to ensure your source code complies with the latest policies[4].\nSecurity Scanning Features Amazon Q Developer can scan your entire codebase or automatically scan code as you write. This workshop will focus on project-based scanning with the ability to scan up to 100 MB code at a time.\nThe tool helps detect security issues such as:\nCross-site scripting vulnerabilities (XSS): Injecting malicious code into web pages. Log injections: Inserting harmful data into logs. Loose file permissions: Files with overly broad access rights. Hardcoded credentials: Storing passwords or API keys directly in source code. SQL Injection: Injecting malicious SQL code into queries. Secrets exposure: Sensitive information leaked in code or logs. Prompt Library mazon Q Developer currently allows you to build a library of common prompts, stored as Markdown files in the ~/.aws/amazonq/prompts directory. This enables prompt reuse across multiple conversations and projects, which is especially useful for generating diagrams such as Entity-Relationship (ER) diagram or sequence diagram.\nWhy is this Workshop Important? Early detection of vulnerabilities helps reduce the cost and effort of remediation. Amazon Q Developer supports \u0026ldquo;shift-left security\u0026rdquo; integrating security early in the software development lifecycle (SDLC) instead of treating it as a final step[1][4].\nWith advanced static analysis and machine learning, Amazon Q Developer not only detects vulnerabilities but also provides auto-generated code fixes for identified issues[1][3]. This helps developers not only understand what the problem is but also how to fix it effectively.\nThis workshop will equip you with practical knowledge and skills to use Amazon Q Developer effectively in building safer and more secure applications.\n"
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/1-open-redirect-vulnerability/",
	"title": "Open Redirect Vulnerability",
	"tags": [],
	"description": "",
	"content": "Open Redirect Vulnerability is an security weakness where an attacker could supply a malicious URL as an input, potentially leading users to phishing or malware sites. This is a common security flaw in web applications that can be exploited to conduct phishing attacks or distribute malware.\n1. First, create a folder. Then, create a .py file inside it and paste the code into the file.\nfrom flask import app\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url_noncompliant():\rfrom flask import request, redirect\rendpoint = request.args[\u0026#39;url\u0026#39;]\r# Noncompliant: redirect to a user-supplied URL without sanitization.\rreturn redirect(endpoint) 2. Click on Amazon Q in the status bar and run Project Scan to see how the Open Redirect Vulnerability is detected. Figure 1: Running a project scan with Amazon Q Developer\n3. Select Review workspace or Review active file Figure 2: Choosing to review the workspace or active file\n4. The following finding will be visible in the status bar Figure 3: Security finding displayed in the status bar\n5. To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: Figure 4: Hovering over insecure code to view details Figure 5: Detailed information about the security finding\n6. To fix the open redirect issue in the provided code snippet, you should validate and/or sanitize the URL before performing the redirection. For example, only allow redirects to known, safe domains by checking the user-supplied URL against a whitelist.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\nfrom flask import Flask, request, redirect, url_for\rapp = Flask(__name__)\rALLOWED_HOSTS = [\u0026#39;www.example.com\u0026#39;, \u0026#39;example.org\u0026#39;]\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url():\rfrom urllib.parse import urlparse\r# Retrieve the URL from request arguments and parse it\ruser_url = request.args.get(\u0026#39;url\u0026#39;, \u0026#39;\u0026#39;)\rparsed_url = urlparse(user_url)\r# Check if the URL\u0026#39;s host is in the list of allowed hosts\rif parsed_url.netloc in ALLOWED_HOSTS:\rreturn redirect(user_url)\relse:\r# Redirect to a default page or show an error\rreturn redirect(url_for(\u0026#39;index\u0026#39;)) # Assume \u0026#39;index\u0026#39; is a valid endpoint 7. Try fixing the issue and running the scan again.\n"
},
{
	"uri": "//localhost:1313/3-prompt-library/2-create-security-prompt-library/",
	"title": "Create Security Prompt Library",
	"tags": [],
	"description": "",
	"content": "Now we\u0026rsquo;ll create a specialized prompt library for security analysis. These prompts will help standardize our security assessments and ensure comprehensive vulnerability detection.\nCreate Multi-Vulnerability-Scan Prompt In your IDE, open an Amazon Q chat window.\nType @, and select Prompts.\nFigure 1: Select Prompts in the Amazon Q chat window\nChoose Create a new prompt. Figure 2: Click to create a new prompt\nIn Prompt name, enter a prompt name such as Multi-Vulnerability-Scan and press Enter. Figure 3: Enter the prompt name and confirm Amazon Q creates a prompt file called Multi-Vulnerability-Scan.md in the ~/.aws/amazonq/prompts folder, and opens the file in your IDE.\nIn the prompt file, add a detailed prompt. For example: Scan Python Flask application for these vulnerabilities:\r- SQL injection in database queries\r- Open redirect in route handlers\r- Command injection in subprocess calls\r- Path traversal in file operations\r- Privilege escalation in access controls\r- Hardcoded credentials and API keys\rReport: vulnerability type, line number, risk level, exploit scenario, secure code fix. Save the prompt file. Create Database-Security-Check Prompt Repeat the creation process with prompt name Database-Security-Check and this content:\nFocus on database security issues:\r- SQL injection via string concatenation\r- Unsafe query construction\r- Missing parameterized queries\r- Database credential exposure\rProvide secure SQLite/PostgreSQL examples. Create Web-App-Security-Audit Prompt Create another prompt named Web-App-Security-Audit with this content:\nAudit Flask web application for:\r- Unvalidated redirects\r- Command injection via user input\r- File path manipulation\r- Missing input sanitization\r- Unsafe subprocess execution\rInclude Flask security best practices. Using Your Security Prompts In your IDE, open an Amazon Q chat window.\nType @, and select Prompts.\nChoose your saved prompt, for example, Multi-Vulnerability-Scan.\n(Optional) In the chat input window, add details, as required. You can type more text and add more context types. An example prompt might look like this\u0026hellip;\n@Multi-Vulnerability-Scan analyze the @vulnerable_app.py using the files in the @security-test folder Submit the prompt and wait for Amazon Q to generate an answer. Figure 4: Use the prompt and view the security scan results in Amazon Q\nYour security prompt library is now ready for comprehensive vulnerability testing in the next section.\n"
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/",
	"title": "Hands-on Vulnerability Detection",
	"tags": [],
	"description": "",
	"content": "In this section, you will get hands-on experience with how Amazon Q Developer helps detect and address security vulnerabilities directly during the coding process. With real-time security scanning, Q Developer automatically identifies common issues such as SQL injection, open redirect, path traversal, privilege escalation, and exposure of AWS credentials.\nYou will practice step by step:\nDetecting vulnerabilities as you write code Understanding the root cause and severity Receiving automated remediation suggestions that follow industry security best practices Contents 2.1 Open Redirect Vulnerability - Unvalidated URL redirections\n2.2 SQL Injection - Database query manipulation attacks\n2.3 Improper Privilege Management - Excessive permission assignments\n2.4 Path Traversal - Unauthorized file system access\n2.5 OS Command Injection - System command execution attacks\n2.6 AWS Credentials Logged - Sensitive credential exposure\nPrerequisites Amazon Q Developer installed in your IDE (Visual Studio Code recommended) Amazon Q Developer Pro subscription for Auto Scan features (or Free tier for Project Scans) Basic Python knowledge for understanding code examples Active AWS account for Amazon Q Developer authentication IDE workspace set up for creating and testing vulnerable code samples Through real-world scenarios, you will become familiar with the process of checking, assessing, and fixing security vulnerabilities, helping you write safer code right from the development stage.\n"
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/2-sql-injection/",
	"title": "SQL Injection",
	"tags": [],
	"description": "",
	"content": "SQL injection vulnerability is present within code when user-provided inputs are not sanitized before being used to generate a SQL database query. An attacker can misuse un-trusted input to run query statements that read, modify, or delete database content.\n1. Copy the following code within your IDE. This code is vulnerable to SQL injection attack as it constructs the SQL query by directly concatenating user input (name) into the query string. An attacker could manipulate the name parameter to alter the SQL command, potentially gaining unauthorized access to other data in the database, corrupting the data, or even dropping tables.\ndef execute_query_noncompliant(request):\rimport sqlite3\rname = request.GET.get(\u0026#34;name\u0026#34;)\rquery = \u0026#34;SELECT * FROM Users WHERE name = \u0026#34; + name + \u0026#34;;\u0026#34;\rwith sqlite3.connect(\u0026#34;example.db\u0026#34;) as connection:\rcursor = connection.cursor()\r# Noncompliant: user input is used without sanitization.\rcursor.execute(query)\rconnection.commit()\rconnection.close() 2. Click on Amazon Q in the status bar and run Project Scan to see how the SQL Injection Vulnerability is detected. Figure 1: Running a project scan with Amazon Q Developer\n3. Select Review workspace or Review active file Figure 2: Choosing to review the workspace or active file\n4. The following finding will be visible in the status bar Figure 3: Security finding displayed in the status bar\n5. To views details of the findings, hold your cursor over the insecure code and click on “View Details” to learn more: Figure 4: Hovering over insecure code to view details Figure 5: Detailed information about the security finding\n6. To fix the SQL Injection vulnerability in the provided code, you should use parameterized queries, also known as prepared statements. This method ensures that user inputs are handled safely, preventing attackers from injecting malicious SQL code.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\ndef execute_query_compliant(request):\rimport sqlite3\rname = request.GET.get(\u0026#34;name\u0026#34;)\rquery = \u0026#34;SELECT * FROM Users WHERE name = ?\u0026#34;\rwith sqlite3.connect(\u0026#34;example.db\u0026#34;) as connection:\rcursor = connection.cursor()\rcursor.execute(query, (name,)) # Use a parameterized query\rconnection.commit()\rconnection.close() 7. Try fixing the issue and running the scan again.\n"
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/3-improper-privilege-management/",
	"title": "Improper Privilege Management",
	"tags": [],
	"description": "",
	"content": "Privilege escalation occurs when a malicious user exploits a bug, design flaw, or configuration error in an application or operating system to gain elevated access to the system. Elevated privileges can be used to delete files, view private information, or install unwanted programs or backdoors.\n1. Copy the following code within your IDE.\ndef set_user_noncompliant():\rimport os\rroot = 0\r# Noncompliant: the process user is set to root.\ros.setuid(root) 2. Click on Amazon Q in the status bar and run Project Scan to see how the Improper Privilege Management Vulnerability is detected. Figure 1: Running a project scan with Amazon Q Developer\n3. Select Review workspace or Review active file Figure 2: Choosing to review the workspace or active file\n4. The following finding will be visible in the status bar Figure 3: Security finding displayed in the status bar\n5. To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: Figure 3: Hovering over insecure code to view details Figure 4: Detailed information about the security finding\n6. Running processes as root should be avoided whenever possible because it can lead to severe security vulnerabilities, including unauthorized access, privilege escalation, and potential system compromise.\nAlways follow the principle of least privilege, meaning that processes should run with the minimum permissions necessary to perform their required tasks. This reduces the risk and potential impact of a security breach.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\ndef set_user_compliant():\rimport os\rroot = 4\r# Compliant: the process user is set to userid 4.\ros.setuid(root) 7. Try fixing the issue and running the scan again.\n"
},
{
	"uri": "//localhost:1313/3-prompt-library/",
	"title": "Security Prompt Library",
	"tags": [],
	"description": "",
	"content": "You can build a library of common prompts that you can use when chatting with Amazon Q in the IDE. By storing these prompts in your library, you can easily insert them into the chat without having to retype the prompt each time. You can use saved prompts across multiple conversations and projects.\nPrompts are saved in the ~/.aws/amazonq/prompts folder.\nWhy Use Security Prompt Library? In this security workshop, the prompt library helps to:\nConsistently analyze 6 main types of vulnerabilities Save setup time for each lab exercise Ensure the quality of security assessments Focus on remediation instead of writing prompts Benefits of Standardized Security Prompts For Individual Developers\nFaster security reviews with pre-built, tested prompts Comprehensive coverage ensuring no vulnerability types are missed Learning tool to understand security best practices Consistent quality in security assessments For Development Teams\nShared security standards across all team members Onboarding efficiency for new developers Code review consistency using the same security criteria Knowledge sharing through documented security practices For Organizations\nScalable security processes across multiple projects Audit trail of security assessments performed Compliance support with documented security reviews Risk reduction through systematic vulnerability detection By the end of this section, you\u0026rsquo;ll have a comprehensive security prompt library that can be used across all your development projects to maintain consistent security standards and accelerate vulnerability detection.\n"
},
{
	"uri": "//localhost:1313/3-prompt-library/3-test-security-prompts/",
	"title": "Test Security Prompt",
	"tags": [],
	"description": "",
	"content": "Now that we have created our vulnerable code samples and security prompt library, let\u0026rsquo;s test how effectively Amazon Q Developer can identify security issues using different prompt strategies.\nTesting Different Prompt Approaches 1. General Security Review\nUse the comprehensive security prompt to scan a single file:\n@Multi-Vulnerability-Scan @vulnerable_app.py Figure 1: Running a general security review on a single file\nPurpose: Perform a broad security analysis covering all 6 vulnerability types in one scan. Expected Output: General overview of all vulnerabilities with basic remediation suggestions. 2. Specialized Database Security Check\nFocus specifically on database-related vulnerabilities:\n@Database-Security-Check @vulnerable_app.py @file_handler.py Figure 2: Running a specialized database security check\nPurpose: Deep dive into SQL injection and credential exposure issues. Expected Output: Detailed analysis of database security with SQLite/PostgreSQL examples. 3. Web Application Security Audit\nConcentrate on web application specific vulnerabilities:\n@Web-App-Security-Audit @vulnerable_app.py Figure 3: Running a web application security audit\nPurpose: Focus on Flask-specific security issues like redirects and command injection. Expected Output: Web security best practices with Flask-specific remediation. 4. Comprehensive Multi-File Analysis\nAnalyze all vulnerable files simultaneously:\n@Multi-Vulnerability-Scan @vulnerable_app.py @file_handler.py @auth_service.py Figure 4: Running a comprehensive multi-file security analysis\nPurpose: Complete security assessment across the entire codebase.\nExpected Output: Comprehensive report with cross-file vulnerability relationships.\nQuality Assessment Criteria For each security finding, verify that Amazon Q provides:\n✅ Exact line number and problematic code snippet ✅ Severity level (Critical/High/Medium/Low) ✅ Exploitation scenario explaining the security risk ✅ Secure remediation with corrected code example ✅ Prevention best practices to avoid similar issues Comparing Prompt Effectiveness After testing all scenarios, compare the results:\nGeneral prompts provide broad coverage but may lack depth Specialized prompts offer detailed analysis for specific vulnerability types Multi-file scans reveal cross-file security relationships and dependencies "
},
{
	"uri": "//localhost:1313/4-conclusion/",
	"title": "Conclusion and Next Steps",
	"tags": [],
	"description": "",
	"content": "Summary In this workshop, we learned how to use Amazon Q Developer to detect security policy violations and vulnerabilities in your code through static application security testing (SAST), secrets detection, software composition analysis, and Infrastructure as Code (IaC) scanning. Amazon Q Developer’s security scans not only identify vulnerabilities but also suggest improvements to enhance your code quality and security.\nBenefits of Securing Your Code with Amazon Q Developer Incorporating Amazon Q Developer directly into your development environment, especially within your IDE, brings several important advantages:\nReal-Time Detection: Developers receive immediate feedback on vulnerabilities, coding standard violations, and syntax errors as they write code, enabling on-the-spot learning and correction.\nEarly Vulnerability Detection: Catching issues early reduces the cost and effort of fixes, often before code merges or deployment. Better Code Practices: Suggestions for remediation help developers adopt secure coding best practices continuously. Reduced Remediation Time: Addressing security issues during development is faster and more cost-effective than fixing them post-deployment. Learning Resources \u0026amp; Community AWS Documentation \u0026amp; Tutorials: https://aws.amazon.com/codeguru/ OWASP Top Ten: https://owasp.org/www-project-top-ten/ AWS Security Blog \u0026amp; Developer Forums for updates and community support. Advanced Directions \u0026amp; Deep Security Integration Integrate Amazon Q Developer with CI/CD pipelines for automated security checks. Combine with AWS Security Hub and Amazon Inspector for comprehensive cloud security. Use IaC scanning to secure cloud infrastructure templates. Customize prompt libraries to fit your team’s specific workflows. Reference Materials Amazon Q Developer Security Scans Amazon Q Developer Code Reviews Saving prompts to a library for use with Amazon Q Developer chat Code Security Scanning with Amazon Q Developer Amazon Q Developer Context Features Secure Coding with Amazon Q AWS Well-Architected Security Pillar AWS Security Best Practices AWS Prescriptive Guidance: Security OWASP Top 10 Web Application Security Risks Securing Your Code Workshop Amazon Q Developer Pricing CodeGuru Detector Library Keep practicing with Amazon Q Developer and leverage AI to continuously improve your security posture and coding skills. Thank you for participating, and continue your journey toward building more secure, resilient applications!\n"
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/4-path-traversal/",
	"title": "Path Traversal",
	"tags": [],
	"description": "",
	"content": "Constructing path names with unsanitized user input can lead to path traversal attacks (for example, ../../..). This type of attack exploits insufficient security validation/sanitization of user-supplied input file names, allowing attackers to access files or directories that are not intended to be accessible. This can lead to unauthorized access, information disclosure, and even system compromise.\n1. Copy the following code within your IDE.\ndef verify_file_path_noncompliant():\rfrom flask import request\rfile_path = request.args[\u0026#34;file\u0026#34;]\r# Noncompliant: user input file path is not sanitized.\rfile = open(file_path)\rfile.close() 2. Click on Amazon Q in the status bar and run Project Scan to see how the Path Traversal Vulnerability is detected. Figure 1: Running a project scan with Amazon Q Developer\n3. The following finding will be visible in the status bar Figure 2: Security finding for path traversal displayed in the status bar 4. To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: Figure 3: Viewing detailed information about the path traversal vulnerability\n5. Path traversal vulnerabilities can be mitigated by sanitizing user input before using it to construct a file path. This approach involves checking if the user-supplied file path is within a predefined list of allowed paths\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\ndef verify_file_path_compliant():\rfrom flask import request\rbase_path = \u0026#34;/var/data/images/\u0026#34;\rfile_path = request.args[\u0026#34;file\u0026#34;]\rallowed_path = [\u0026#34;example_path1\u0026#34;, \u0026#34;example_path2\u0026#34;]\r# Compliant: user input file path is sanitized.\rif file_path in allowed_path:\rfile = open(base_path + file_path)\rfile.close() 6. Try fixing the issue and running the scan again.\n"
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/5-os-command-injection/",
	"title": "OS Command Injection",
	"tags": [],
	"description": "",
	"content": "Constructing operating system or shell commands with unsanitized user input can lead to inadvertently running malicious code. This kind of vulnerability allows an attacker to execute arbitrary commands on the host operating system under the privileges of the vulnerable application. Command injection attacks can lead to a wide range of malicious outcomes, including unauthorized data access, data corruption, denial of service, and complete system compromise.\n1. Copy the following code within your IDE.\ndef exec_command_noncompliant():\rfrom paramiko import client\rfrom flask import request\raddress = request.args.get(\u0026#34;address\u0026#34;)\rcmd = \u0026#34;ping -c 1 %s\u0026#34; % address\rclient = client.SSHClient()\rclient.connect(\u0026#34;ssh.samplehost.com\u0026#34;)\r# Noncompliant: address argument is not sanitized.\rclient.exec_command(cmd) 2. Run Amazon Q Project Scan to see how the OS command injection vulnerability is detected. Figure 1: Running a project scan to detect OS command injection vulnerability\n3. To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: Figure 2: Viewing detailed information about the OS command injection vulnerability\n4. Whenever possible, avoid constructing shell commands with user inputs. Use language-specific APIs or libraries designed to perform the required actions without invoking the shell.\nInput Validation and Sanitization: If you must include user input in a shell command, rigorously validate the input to ensure it conforms to expected formats (e.g., alphanumeric only). Sanitize the input by escaping or removing potentially dangerous characters.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\nfrom paramiko import SSHClient, AutoAddPolicy\rimport os\rimport shlex\rdef exec_command_compliant():\r# Retrieve SSH credentials and server details from environment variables\rssh_host = os.getenv(\u0026#39;SSH_HOST\u0026#39;, \u0026#39;default_host\u0026#39;)\rssh_username = os.getenv(\u0026#39;SSH_USERNAME\u0026#39;, \u0026#39;default_username\u0026#39;)\rssh_password = os.getenv(\u0026#39;SSH_PASSWORD\u0026#39;, \u0026#39;default_password\u0026#39;)\r# Get the address from the request\u0026#39;s query parameters\rfrom flask import request\raddress = request.args.get(\u0026#34;address\u0026#34;)\r# Sanitize the address argument to prevent command injection\rsafe_address = shlex.quote(address)\r# Prepare the ping command with the sanitized address\rcmd = f\u0026#34;ping -c 1 {safe_address}\u0026#34;\r# Initialize the SSH client and connect to the remote host\rclient = SSHClient()\rclient.load_system_host_keys()\r# Use environment variables for credentials\rclient.connect(ssh_host, username=ssh_username, password=ssh_password)\r# Execute the command on the remote server\rstdin, stdout, stderr = client.exec_command(cmd)\routput = stdout.read().decode()\r# Close the SSH connection\rclient.close()\r# Return or process the command\u0026#39;s output\rreturn output "
},
{
	"uri": "//localhost:1313/2-hands-on-vulnerability-detection/6-aws-credentials-logged/",
	"title": "AWS credentials logged",
	"tags": [],
	"description": "",
	"content": "In this vulnerability, unencrypted AWS credentials can be logged which can expose those credentials to an attacker. Encrypt sensitive data, such as credentials, before they are logged to make the code more secure.\n1. Copy the following code within your IDE.\ndef log_credentials_noncompliant():\rimport boto3\rimport logging\rsession = boto3.Session()\rcredentials = session.get_credentials()\rcredentials = credentials.get_frozen_credentials()\raccess_key = credentials.access_key\rsecret_key = credentials.secret_key\r# Noncompliant: credentials are written to the logger.\rlogging.info(\u0026#39;Access key: \u0026#39;, access_key)\rlogging.info(\u0026#39;secret access key: \u0026#39;, secret_key) 2. Run Amazon Q Project Scan to see how the this vulnerability is detected. Figure 1: Running a project scan to detect credentials being logged\n3. To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: Figure 2: Viewing detailed information about the credentials logging vulnerability\n4. Avoid logging sensitive information such as access keys or secret keys. For AWS resource access management, prefer IAM roles over static access and secret keys, especially for applications running on AWS services like EC2, Lambda, etc. IAM roles provide temporary credentials automatically managed by AWS.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\ndef log_credentials_compliant():\rimport boto3\rsession = boto3.Session()\rcredentials = session.get_credentials()\rcredentials = credentials.get_frozen_credentials()\raccess_key = credentials.access_key\rsecret_key = credentials.secret_key\r# Compliant: avoids writing credentials to the logger.\rsession = boto3.Session(\raws_access_key_id=access_key,\raws_secret_access_key=secret_key\r) "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]