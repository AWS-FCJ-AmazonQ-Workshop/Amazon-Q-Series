[
{
	"uri": "//localhost:1313/1-open-redirect-vulnerability/",
	"title": "Open Redirect Vulnerability",
	"tags": [],
	"description": "",
	"content": "Open Redirect Vulnerability is an security weakness where an attacker could supply a malicious URL as an input, potentially leading users to phishing or malware sites. This is a common security flaw in web applications that can be exploited to conduct phishing attacks or distribute malware.\nCreate a folder, before create a file .py and paste code into\nfrom flask import app\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url_noncompliant():\rfrom flask import request, redirect\rendpoint = request.args[\u0026#39;url\u0026#39;]\r# Noncompliant: redirect to a user-supplied URL without sanitization.\rreturn redirect(endpoint) Click on Amazon Q in the status bar and run Project Scan to see how the Open Redirect Vulnerability is detected. Select Review workspace or Review active file The following finding will be visible in the status bar To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: To fix the open redirect issue in the provided code snippet, you should validate and/or sanitize the URL before performing the redirection. For example, only allow redirects to known, safe domains by checking the user-supplied URL against a whitelist.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\nfrom flask import Flask, request, redirect, url_for\rapp = Flask(__name__)\rALLOWED_HOSTS = [\u0026#39;www.example.com\u0026#39;, \u0026#39;example.org\u0026#39;]\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url():\rfrom urllib.parse import urlparse\r# Retrieve the URL from request arguments and parse it\ruser_url = request.args.get(\u0026#39;url\u0026#39;, \u0026#39;\u0026#39;)\rparsed_url = urlparse(user_url)\r# Check if the URL\u0026#39;s host is in the list of allowed hosts\rif parsed_url.netloc in ALLOWED_HOSTS:\rreturn redirect(user_url)\relse:\r# Redirect to a default page or show an error\rreturn redirect(url_for(\u0026#39;index\u0026#39;)) # Assume \u0026#39;index\u0026#39; is a valid endpoint Try fixing the issue and running the scan again.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Securing Your Code With Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "Securing Your Code With Amazon Q Developer Amazon Q can scan your codebase for security vulnerabilities and code quality issues to improve the posture of your applications throughout the development cycle. You can initiate a scan of an entire codebase, analyzing all files in your local project or workspace, or enable auto scans that assess your code as you write it.\nThis helps your applications to be more secure and resilient by highlighting security issues such as cross-site scripting vulnerabilities, log injections, loose file permissions, hardcoded credentials and more. The earlier security issues are detected, the less work and effort is required to fix the same.\nScan are powered by Security Detectors from the Amazon CodeGuru Detector Library. As security policies are updated and detectors are added, scans automatically incorporate new detectors to ensure your code is compliant with the most up-to-date policies.\nAmazon Q Developer detects security policy violations and vulnerabilities in your code with static application security testing (SAST), secrets detection, and infrastructure as code (IaC) scanning. Security issues found during the scan are highlighted in the Problems panel in VS Code.\nIn this section, we will use the Security Scanning features of Q Developer to detect insecure code.\nThis module deliberately includes code fragments that will trigger security scan findings. Code fragments in this module should only be used for demonstration purposes.\nAmazon Q can scan your entire codebase, or auto-scan your code as you write it. For the purposes of this workshop we will be using project based scanning. Upto 100 MB of code can be scanned at a time.\nScan your project Choose the text, Amazon Q, from the rectangular area at the bottom of the IDE window. A drop-down window will appear at the top from which the user may choose Run Project Scan. "
},
{
	"uri": "//localhost:1313/2-sql-injection/",
	"title": "SQL Injection",
	"tags": [],
	"description": "",
	"content": "SQL injection vulnerability is present within code when user-provided inputs are not sanitized before being used to generate a SQL database query. An attacker can misuse un-trusted input to run query statements that read, modify, or delete database content.\nCopy the following code within your IDE. This code is vulnerable to SQL injection attack as it constructs the SQL query by directly concatenating user input (name) into the query string. An attacker could manipulate the name parameter to alter the SQL command, potentially gaining unauthorized access to other data in the database, corrupting the data, or even dropping tables.\ndef execute_query_noncompliant(request):\rimport sqlite3\rname = request.GET.get(\u0026#34;name\u0026#34;)\rquery = \u0026#34;SELECT * FROM Users WHERE name = \u0026#34; + name + \u0026#34;;\u0026#34;\rwith sqlite3.connect(\u0026#34;example.db\u0026#34;) as connection:\rcursor = connection.cursor()\r# Noncompliant: user input is used without sanitization.\rcursor.execute(query)\rconnection.commit()\rconnection.close() "
},
{
	"uri": "//localhost:1313/3-getting-started/1-in-visual-studio-code/",
	"title": "Amazon Q Developer in Visual Studio Code",
	"tags": [],
	"description": "",
	"content": "Install the Amazon Q extension in Visual Studio Code Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. Ensure you have installed Visual Studio Code for your operating system. You can find the setup steps in their official documentation.\nInstall the Amazon Q extension Open Visual Studio Code Click on Extensions on the left activity bar. In the extensions, search for \u0026ldquo;Amazon Q\u0026rdquo;. Select Install the extension, restart/reload VSCode if required. Authenticate You have 2 options to sign-in and this blog explores both the authentication methods:\nwith Builder ID for Individual users with Free Tier with AWS IAM Identity Center for Professional users with Pro Tier You might use a workforce identity in IAM Identity Center to represent your work-self and an AWS Builder ID to represent your private-self. These identities operate independently. Amazon Q Developer Pricing for more details.\nSource: Amazon Q Developer Pricing\nIn the Visual Studio Code, Open Amazon Q from the left Activity Bar. You will be presented with following screen:\nWith AWS Builder ID (no AWS account required) Choose this option to use Amazon Q for free. You do not need an AWS Account, however, you do need to sign up for an AWS Builder ID. AWS Builder ID is a personal profile that provides access to select tools and services. AWS Builder ID is free. You only pay for the AWS resources you consume in your AWS accounts, which is separate from Builder ID. You can use the same email for your AWS Builder ID and for the root user email of an AWS account.\nSelect on the first option \u0026ldquo;Use for Free\u0026rdquo; and click \u0026ldquo;Continue\u0026rdquo;. Enter your email address, click Next Enter your name, click Next Enter verification code sent to your email, click Verify Enter your password and type the CAPTCHA Enter the email address you used to register for your Builder ID, click Next Enter the password you used to register for your Builder ID, click Sign in Enter verification code sent to your email, click Verify You have successfully created a Builder ID account In the Visual Studio Code panel, select Cancel Select the option \u0026ldquo;Use for Free\u0026rdquo; and click \u0026ldquo;Continue\u0026rdquo;. Click Open Click Allow access You have successfully approved the request for AWS IDE Extensions for VS Code Once done, you can switch back to your IDE. You have successfully logged into Amazon Q with Builder ID. A Q Chat window should automatically open for you. You can now skip to [Ask Amazon Q a question in the IDE](Ask Amazon Q a question in the IDE).\nPro license with AWS IAM Identity Center Important!: If you are following this step, you will incur AWS charges. If you are just testing this out, make sure to remove the users at the end to reduce the cost.\nTo authenticate via this method, it is important to have an AWS Account with activated IAM Identity Centre. Amazon Q requires IAM Identity Center. If your AWS Organization does not have IAM Identity Center activated. The Account Administrator must first activate IAM Identity Center in this account in order to set up Amazon Q.\nRequest your account administrator to create an identity for you in the IAM Identity Center and subscribe this identity to Developer Pro.\nEnsure the Account Administrator shares two key items for you to login via Visual Studio Code:\nStart URL AWS Region These are available in the AWS Console for IAM Identity Center, in the \u0026ldquo;Settings\u0026rdquo; section you will the AWS access portal URL under Identity Source tab.\nIn Visual Studio Code, perform following steps to authenticate:\nClick on \u0026ldquo;Amazon Q\u0026rdquo; in the Status Bar below for more options like Pause auto-suggestions, open settings or Sign out. Access the Amazon Q Select Amazon Q Developer Select Get started Enter Email address, First name \u0026amp; Last name Select Continue Type Profile name Select Create You have successfully created a profile for Amazon Q Developer. Copy Start URL Access your email address Select Accept invitation At the New User Registration section Type the New password Type the Confirm password Click Set new password Enter User name (your email) Click Next Enter your Password Click Log in At the MFA Device Enrollment section Select Authenticator Application Click Next At the Set up authenticator app If you haven’t installed a virtual MFA app, please install it using the link: Authenticator Extension\nClick Show QR code Use the virtual MFA app or your device\u0026rsquo;s camera to scan the QR code. Enter Code from authenticator Click MFA Designation Click Complete Check the email Active Your Amazon Q Developer Pro Subscription On the Sign-in window in Amazon Q, select on the first option \u0026ldquo;Use with Pro license\u0026rdquo; and click \u0026ldquo;Continue\u0026rdquo; You will be asked to enter Start URL and AWS Region we noted earlier.\nClick Continue You will get a pop-up with a confirmation code, click on \u0026ldquo;Proceed to browser\u0026rdquo;.\nYou will be redirected to a web browser. Confirm the code is same and click on \u0026ldquo;Confirm and continue\u0026rdquo;. This redirects you to sign in to your Identity Center profile. Once done, simply \u0026ldquo;Allow access\u0026rdquo;. You have successfully approved the request for AWS IDE Extensions for VS Code You can now switch back to your Visual Studio Code IDE. You have successfully logged into Amazon Q with Pro license. A Amazon Q Chat window should automatically open for you. Ask Amazon Q a question in the IDE Amazon Q can be found in the activity bar in Visual Studio Code. Open your source code or a GitHub repository. Select code, right click send to Amazon Q to explain code OR open the file and ask Q to explain the code. "
},
{
	"uri": "//localhost:1313/3-getting-started/2-operational-investigations/",
	"title": "Amazon Q Developer operational investigations",
	"tags": [],
	"description": "",
	"content": "What is Amazon Q Developer Operational Investigations? Amazon Q’s operational investigations feature helps you quickly investigate and resolve incidents by surfacing relevant information, leveraging the power of generative AI technology. Amazon Q will scan metrics, logs, traces, deployment events, and other data to generate root cause hypotheses and actionable insights.\nGetting Started Open the CloudWatch console In the left navigation pane choose AI Operations choose Investigations Choose Configure for this account. (Please note: To create an investigation group and set up Amazon Q Developer operational investigations, you must be signed in to an IAM principal that has the either the AIOpsConsoleAdminPolicy or the AdministratorAccess IAM policy attached, or to an account that has similar permissions. Settings in the investigation group help you centrally manage the common properties of your investigations) Select the retention period for investigations. The default is 90 days.\nYou can optionally customize the encryption settings. For example: if you would like to use a customer managed key instead of the default one provided by AWS. For more information, see Encryption of investigation data. (Optional) The user access section of the getting started wizard helps you understand how to set up appropriate permissions for different user roles interacting with Amazon Q Developer operational investigations. (The link will take you the documentation with more information) AWS provides three managed IAM policies: AIOpsConsoleAdminPolicy for administrators, AIOpsOperatorAccess for users who need to start and manage investigations, and AIOpsReadOnlyAccess for users who only need to view information. You can optionally connect Amazon Q Developer operational investigations to IAM Identity Center. By integrating with IAM Identity Center, you can attribute the suggestions added to the investigation feed, back to individual users. For more information, please see this link. Choose Next to continue\nIn the “Investigation configuration” section, you can setup the IAM role that Q Developer will use to access telemetry data for its investigations. Select “Auto-create”. This will create a configure the new role with the required permissions. Under the Enhanced integration section, you can configure additional options that will further assist Q developer in performing the investigation. The next steps will briefly explain what these options do.\nTags for application boundary detection: This section allows you to specify existing custom tag keys used for your applications. These tags help Amazon Q Developer refine its search when discovering resource relationships. More information can be found here. The CloudTrail section for change event detection lets Amazon Q Developer access CloudTrail data, improving its analysis of system changes and root cause hypotheses. The X-Ray for topology mapping and Application Signals for health assessment sections highlight additional AWS services that can enhance Amazon Q Developer’s capabilities. Choose “Next” to continue\nThe last section of the wizard allows to configure third party integrations. Those include ticketing systems, chat integration, and SNS. We won’t cover those in-depth here. But if you like more information, please visit this link.\nChoose “Complete setup” to start the configuration. After a few seconds, you will see a message confirming “Initial Setup success” "
},
{
	"uri": "//localhost:1313/3-getting-started/",
	"title": "Getting started with Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "You can use Amazon Q Developer to enable completions for hundreds of popular CLIs like git, npm, docker, and aws. Amazon Q for command line integrates contextual information, providing Amazon Q with an enhanced understanding of your use case, enabling it to provide relevant and context-aware responses. As you begin typing, Amazon Q populates contextually relevant subcommands, options, and arguments.\nYou can install Amazon Q for command line on macOS and specific Linux environments, including AppImage and Ubuntu packages, which provides features such as autocompletion, Amazon Q chat, and inline zsh completion. You can work with Amazon Q CLI to do the following:\nCommand line interface to chat through natural language conversations, questions, and responses within your terminal environment.\nTranslate natural language instructions to executable shell code snippets.\nInline suggestions as you type in your command prompt, with completions to popular CLIs.\n"
},
{
	"uri": "//localhost:1313/4-conclusion/",
	"title": "Conclution",
	"tags": [],
	"description": "",
	"content": "In conclusion, observability stands as a critical capability for modern, complex systems. It empowers us to move beyond simple monitoring by continuously generating and enabling the discovery of actionable insights derived from system signals. This allows for a profound understanding of a system\u0026rsquo;s internal state through its external manifestations, facilitating informed and timely interventions.\nThe foundational three pillars of observability – metrics, logs, and traces – each contribute uniquely to this understanding:\nMetrics provide quantitative, time-series data, essential for trend identification, capacity planning, and predictive analysis. Logs offer immutable, timestamped records of discrete events, proving invaluable for diagnosing emergent and unpredictable behaviors. Traces map the end-to-end journey of requests across distributed systems, revealing latency bottlenecks and the intricate flow of operations. On the AWS platform, these pillars are comprehensively addressed through CloudWatch Metrics, CloudWatch Logs, and AWS X-Ray. Working in synergy, these services constitute a robust observability solution, delivering in-depth visibility into the behavior, performance, and overall reliability of AWS environments and the applications they host. By effectively leveraging these tools, users can proactively manage their systems, optimize performance, and ensure a resilient and dependable operational landscape.\nNext Steps Continue your Amazon ECS learning journey by exploring these specialized workshop modules:\nAuto Scaling - Learn to dynamically scale your applications Networking - Master ECS networking concepts and implementations Observability - Implement comprehensive monitoring solutions Security - Implement robust security controls and best practices Automation - Streamline deployment workflows Storage - Integrate Amazon EFS for persistent storage Each module provides detailed hands-on experience to help you build production-ready ECS applications.\nCredits Le Minh Nghia - https://www.linkedin.com/in/minhnghia2k3/\nTran Doan Cong Ly - https://www.linkedin.com/in/trandoancongly/\nReferences Container Insights - https://catalog.workshops.aws/ecs-immersion-day/en-US/50-observability/container-insights\nOpenTelemetry - https://catalog.workshops.aws/ecs-immersion-day/en-US/50-observability/open-telemetry\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]