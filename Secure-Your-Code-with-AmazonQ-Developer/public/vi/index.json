[
{
	"uri": "//localhost:1313/vi/",
	"title": "Bảo mật code của bạn với Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "Bảo mật code của bạn với Amazon Q Developer Tóm tắt nhanh Sau khi đã hoàn thành Workshop Bắt đầu với Amazon Q Developer và nắm vững các tính năng cơ bản, bạn sẽ tiếp tục với workshop này để khám phá cách sử dụng Amazon Q Developer nhằm tăng cường bảo mật và nâng cao chất lượng mã nguồn trên AWS. Trong workshop này, bạn sẽ được hướng dẫn thiết lập môi trường, thực hiện quét và phát hiện lỗ hổng bảo mật theo thời gian thực, nhận các khuyến nghị sửa lỗi, tự động review code và áp dụng các best practices bảo mật theo tiêu chuẩn quốc tế cho dự án của mình.\nThời lượng Khoảng 2 giờ, bao gồm thiết lập môi trường và thực hành\nĐối tượng mục tiêu Application Developers - Các nhà phát triển ứng dụng Cybersecurity Professionals - Chuyên gia an ninh mạng Bất kỳ ai quan tâm đến Secure Coding Practices - Thực tiễn lập trình bảo mật Kiến thức nền tảng yêu cầu Kiến thức cơ bản về Python để hiểu các mẫu code và tác động của các lỗ hổng bảo mật Hiểu biết chung về OWASP Top Ten sẽ giúp bạn hiểu rõ hơn về các lỗ hổng trong mẫu code Chi phí Workshop này sử dụng Amazon Q Developer Free Tier cung cấp tính năng quét lỗ hổng bảo mật với giới hạn 50 tương tác mỗi tháng. Đây là một lợi thế lớn vì bạn có thể trải nghiệm đầy đủ tính năng mà không phát sinh chi phí.\nHình 1: Nâng cao độ tin cậy và bảo mật với Amazon Q Developer\n"
},
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu về Secure Code Với Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Secure Code Với Amazon Q Developer Chào mừng bạn đến với Workshop Secure Your Code With Amazon Q Developer! Đây là buổi thực hành về bảo mật mã nguồn bằng AI với Amazon Q Developer – trợ lý AI hội thoại giúp bạn hiểu, xây dựng và bảo vệ ứng dụng AWS hiệu quả[1][2].\nAmazon Q Developer không chỉ hỗ trợ code completion mà còn có thể quét mã nguồn, phát hiện và đề xuất sửa các lỗ hổng bảo mật, cập nhật, debug và tối ưu code[1][3].\nMục tiêu workshop Workshop này tập trung vào tính năng Security Scanning (/review) của Amazon Q Developer để phát hiện các vi phạm chính sách bảo mật và lỗ hổng trong mã nguồn của bạn, từ đó cải thiện chất lượng bảo mật tổng thể[1][4]. Amazon Q Developer sử dụng Static Application Security Testing (SAST), secrets detection, software composition analysis và Infrastructure as Code (IaC) scanning để phát hiện các vấn đề bảo mật[5][6][7].\nCông cụ này được hỗ trợ bởi Amazon CodeGuru Detector Library với hàng nghìn detectors bảo mật trên nhiều ngôn ngữ lập trình khác nhau[1][8]. Khi các chính sách bảo mật được cập nhật và các detector mới được thêm vào, Amazon Q tự động tích hợp để đảm bảo mã nguồn của bạn tuân thủ các chính sách mới nhất[4].\nTính năng Security Scanning Amazon Q Developer có thể quét toàn bộ codebase của bạn hoặc tự động quét code khi bạn viết. Workshop này sẽ tập trung vào project-based scanning với khả năng quét lên đến 100 MB code mỗi lần.\nCông cụ này giúp phát hiện các vấn đề bảo mật như:\nCross-site scripting vulnerabilities (XSS): Chèn mã độc vào trang web. Log injections: Chèn dữ liệu độc hại vào log. Loose file permissions: Quyền truy cập file quá rộng. Hardcoded credentials: Lưu mật khẩu/API key trong mã nguồn. SQL Injection: Chèn mã SQL độc hại vào truy vấn. Secrets exposure: Lộ thông tin nhạy cảm trong code hoặc log. Prompt Library Amazon Q Developer hiện tại cho phép xây dựng thư viện các prompt thông dụng, được lưu trữ dưới dạng file Markdown trong thư mục ~/.aws/amazonq/prompts. Điều này giúp tái sử dụng các prompt trên nhiều cuộc hội thoại và dự án khác nhau, đặc biệt hữu ích cho việc tạo các loại diagram như Entity-Relationship (ER) diagram hoặc sequence diagram.\nTại sao Workshop này quan trọng? Phát hiện sớm lỗ hổng giúp giảm chi phí và công sức khắc phục. Amazon Q Developer hỗ trợ \u0026ldquo;shift-left security\u0026rdquo; - tích hợp bảo mật sớm trong vòng đời phát triển phần mềm (SDLC) thay vì xem xét bảo mật như một bước cuối cùng[1][4].\nVới khả năng phân tích tĩnh tiên tiến và machine learning, Amazon Q Developer không chỉ phát hiện lỗ hổng mà còn cung cấp auto-generated code fixes cho các lỗ hổng đã xác định[1][3]. Điều này giúp các developer không chỉ biết vấn đề là gì mà còn biết cách khắc phục một cách hiệu quả.\nWorkshop này sẽ cung cấp cho bạn kiến thức thực tiễn và kỹ năng cần thiết để sử dụng Amazon Q Developer một cách hiệu quả trong việc xây dựng các ứng dụng an toàn và bảo mật hơn.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/1-open-redirect-vulnerability/",
	"title": "Lỗ hổng Open Redirect",
	"tags": [],
	"description": "",
	"content": "Lỗ hổng Open Redirect (Chuyển hướng Mở) là một điểm yếu bảo mật, trong đó kẻ tấn công có thể cung cấp một URL độc hại làm đầu vào, có khả năng dẫn người dùng đến các trang web lừa đảo hoặc chứa phần mềm độc hại. Đây là một lỗi bảo mật phổ biến trong các ứng dụng web có thể bị khai thác để thực hiện các cuộc tấn công lừa đảo hoặc phát tán phần mềm độc hại.\n1. Đầu tiên, tạo một thư mục. Sau đó, tạo một tệp .py bên trong và dán đoạn mã sau vào tệp.\nfrom flask import app\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url_noncompliant():\rfrom flask import request, redirect\rendpoint = request.args[\u0026#39;url\u0026#39;]\r# Noncompliant: redirect to a user-supplied URL without sanitization.\rreturn redirect(endpoint) 2. Nhấp vào Amazon Q trên thanh trạng thái và chạy Project Scan để xem cách phát hiện Lỗ hổng Open Redirect. Hình 1: Chạy quét dự án với Amazon Q Developer\n3. Chọn Review workspace or Review active file Hình 2: Chọn quét toàn bộ workspace hoặc file đang mở 4. Phát hiện sau sẽ hiển thị trên thanh trạng thái Hình 3: Kết quả phát hiện lỗ hổng hiển thị trên thanh trạng thái\n5. Để xem chi tiết các phát hiện, giữ con trỏ chuột trên đoạn mã không an toàn và nhấp vào \u0026ldquo;View Details\u0026rdquo; để tìm hiểu thêm: Hình 4: Di chuột lên mã không an toàn để xem chi tiết Hình 5: Thông tin chi tiết về lỗ hổng bảo mật\n6. Để khắc phục vấn đề chuyển hướng mở trong đoạn mã được cung cấp, bạn nên xác thực và/hoặc làm sạch URL trước khi thực hiện chuyển hướng. Ví dụ: chỉ cho phép chuyển hướng đến các miền đã biết, an toàn bằng cách kiểm tra URL do người dùng cung cấp với danh sách trắng.\nDưới đây là một ví dụ về cách khắc phục đoạn mã này. Đảm bảo lưu tệp trước khi chạy lại quá trình quét.\nfrom flask import Flask, request, redirect, url_for\rapp = Flask(__name__)\rALLOWED_HOSTS = [\u0026#39;www.example.com\u0026#39;, \u0026#39;example.org\u0026#39;]\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url():\rfrom urllib.parse import urlparse\r# Retrieve the URL from request arguments and parse it\ruser_url = request.args.get(\u0026#39;url\u0026#39;, \u0026#39;\u0026#39;)\rparsed_url = urlparse(user_url)\r# Check if the URL\u0026#39;s host is in the list of allowed hosts\rif parsed_url.netloc in ALLOWED_HOSTS:\rreturn redirect(user_url)\relse:\r# Redirect to a default page or show an error\rreturn redirect(url_for(\u0026#39;index\u0026#39;)) # Assume \u0026#39;index\u0026#39; is a valid endpoint 7. Thử khắc phục vấn đề và chạy lại quá trình quét.\n"
},
{
	"uri": "//localhost:1313/vi/3-prompt-library/1-create-vulnerable-code-samples/",
	"title": "Tạo Vulnerable Code Samples",
	"tags": [],
	"description": "",
	"content": "Để thực hành với tính năng quét bảo mật của Amazon Q Developer, chúng ta sẽ tạo các file mã nguồn chứa các lỗ hổng bảo mật phổ biến. Những file này sẽ được sử dụng để kiểm tra các prompt bảo mật khác nhau trong thư viện của bạn.\nSetup Test Environment 1. Tạo một thư mục mới cho security testing:\nmkdir security-test\rcd security-test 2. Tạo các file code có lỗ hổng như hướng dẫn bên dưới.\nCreate Vulnerable App Tên file: vulnerable_app.py\nFile này chứa 3 loại vulnerability chính trong một Flask web application:\nimport sqlite3\rimport os\rimport subprocess\rfrom flask import Flask, request, redirect\rapp = Flask(**name**)\r# SQL Injection vulnerability\rdef get_user(username):\rconn = sqlite3.connect(\u0026#39;users.db\u0026#39;)\rquery = f\u0026#34;SELECT * FROM users WHERE username = \u0026#39;{username}\u0026#39;\u0026#34;\rcursor = conn.execute(query)\rreturn cursor.fetchone()\r# Open Redirect vulnerability\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_user():\rurl = request.args.get(\u0026#39;url\u0026#39;)\rreturn redirect(url)\r# Command Injection vulnerability\r@app.route(\u0026#39;/ping\u0026#39;)\rdef ping_host():\rhost = request.args.get(\u0026#39;host\u0026#39;)\rresult = subprocess.run(f\u0026#39;ping -c 1 {host}\u0026#39;, shell=True, capture_output=True)\rreturn result.stdout Các vulnerabilities trong file này:\nSQL Injection - Nối chuỗi trực tiếp trong query Open Redirect - Không kiểm tra hợp lệ URL trước khi redirect Command Injection - Thực thi shell không an toàn Create File Handler Tên file: file_handler.py\nFile này minh họa các vulnerabilities liên quan đến file operations và credential management:\nimport os\r# Path Traversal vulnerability\rdef read_file(filename):\rfile_path = f\u0026#34;/app/uploads/{filename}\u0026#34;\rwith open(file_path, \u0026#39;r\u0026#39;) as f:\rreturn f.read()\r# Credential Exposure vulnerability\rdef connect_database():\rDB_PASSWORD = \u0026#34;admin123\u0026#34;\rconnection_string = f\u0026#34;postgresql://user:{DB_PASSWORD}@localhost/mydb\u0026#34;\rprint(f\u0026#34;Connecting to: {connection_string}\u0026#34;)\rreturn connection_string Các vulnerabilities trong file này:\nPath Traversal - Không kiểm tra/sanitize input filename Credential Exposure - Hardcoded password và credential logging Create Auth Service Tên file: auth_service.py\nFile này chứa privilege escalation và credential management vulnerabilities:\n# Privilege Escalation vulnerability\rdef check_admin_access(user_id):\rif user_id:\rreturn True # Missing proper role check\rreturn False\rdef delete_user(current_user, target_user_id):\rif check_admin_access(current_user.id):\rreturn f\u0026#34;User {target_user_id} deleted\u0026#34;\rreturn \u0026#34;Access denied\u0026#34;\r# Hardcoded API key\rAPI_KEY = \u0026#34;sk-1234567890abcdef\u0026#34; Các vulnerabilities trong file này:\nPrivilege Escalation - Logic kiểm soát truy cập yếu Credential Exposure - Hardcoded API key Những file này sẽ được sử dụng trong các lab tiếp theo để test các security prompts khác nhau.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/",
	"title": "Hands-on phát hiện lỗ hổng",
	"tags": [],
	"description": "",
	"content": "Ở phần này, bạn sẽ hands-on trải nghiệm cách Amazon Q Developer hỗ trợ phát hiện và xử lý lỗ hổng bảo mật ngay trong quá trình lập trình. Với khả năng quét bảo mật realtime, Q Developer tự động nhận diện các vấn đề phổ biến như SQL injection, open redirect, path traversal, privilege escalation, và lộ thông tin AWS credentials.\nBạn sẽ thực hành từng bước:\nPhát hiện lỗ hổng khi viết code Hiểu nguyên nhân và mức độ nghiêm trọng Nhận đề xuất sửa lỗi tự động, tuân thủ các industry security best practices. Nội dung 2.1 Open Redirect Vulnerability - Chuyển hướng URL không được xác thực\n2.2 SQL Injection - Tấn công thao tác truy vấn cơ sở dữ liệu\n2.3 Improper Privilege Management - Phân quyền vượt mức cần thiết\n2.4 Path Traversal - Truy cập trái phép hệ thống tệp\n2.5 OS Command Injection - Tấn công thực thi lệnh hệ điều hành\n2.6 AWS Credentials Logged - Lộ thông tin xác thực nhạy cảm\nĐiều kiện tiên quyết Đã cài đặt Amazon Q Developer trong IDE của bạn (khuyến nghị sử dụng Visual Studio Code) Đăng ký Amazon Q Developer Pro để sử dụng tính năng Auto Scan (hoặc Free tier cho Project Scans) Có kiến thức cơ bản về Python để hiểu các ví dụ mã nguồn Tài khoản AWS đang hoạt động để xác thực Amazon Q Developer Đã thiết lập workspace IDE để tạo và kiểm thử các mẫu mã nguồn có lỗ hổng Thông qua các tình huống thực tế, bạn sẽ làm quen với quy trình kiểm tra, đánh giá và khắc phục lỗ hổng bảo mật, giúp code an toàn hơn ngay từ giai đoạn phát triển.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/2-sql-injection/",
	"title": "SQL Injection",
	"tags": [],
	"description": "",
	"content": "Lỗ hổng SQL injection xuất hiện trong mã khi các đầu vào do người dùng cung cấp không được làm sạch trước khi được sử dụng để tạo truy vấn cơ sở dữ liệu SQL. Kẻ tấn công có thể lạm dụng đầu vào không đáng tin cậy để chạy các câu lệnh truy vấn đọc, sửa đổi hoặc xóa nội dung cơ sở dữ liệu.\n1. Sao chép đoạn mã sau vào IDE của bạn. Đoạn mã này dễ bị tấn công SQL injection vì nó xây dựng truy vấn SQL bằng cách nối trực tiếp đầu vào của người dùng (name) vào chuỗi truy vấn. Kẻ tấn công có thể thao túng tham số name để thay đổi lệnh SQL, có khả năng giành quyền truy cập trái phép vào dữ liệu khác trong cơ sở dữ liệu, làm hỏng dữ liệu hoặc thậm chí xóa các bảng.\ndef execute_query_noncompliant(request):\rimport sqlite3\rname = request.GET.get(\u0026#34;name\u0026#34;)\rquery = \u0026#34;SELECT * FROM Users WHERE name = \u0026#34; + name + \u0026#34;;\u0026#34;\rwith sqlite3.connect(\u0026#34;example.db\u0026#34;) as connection:\rcursor = connection.cursor()\r# Noncompliant: user input is used without sanitization.\rcursor.execute(query)\rconnection.commit()\rconnection.close() 2. Nhấp vào Amazon Q trên thanh trạng thái và chạy Project Scan để xem cách phát hiện Lỗ hổng SQL Injection. Hình 1: Chạy quét dự án với Amazon Q Developer\n3. Chọn Review workspace or Review active file Hình 2: Chọn quét toàn bộ workspace hoặc file đang mở\n4. Phát hiện sau sẽ hiển thị trên thanh trạng thái Hình 3: Kết quả phát hiện lỗ hổng hiển thị trên thanh trạng thái\n5. Để xem chi tiết các phát hiện, giữ con trỏ chuột trên đoạn mã không an toàn và nhấp vào “View Details” để tìm hiểu thêm: Hình 4: Di chuột lên mã không an toàn để xem chi tiết Hình 5: Thông tin chi tiết về lỗ hổng bảo mật\n6. Để khắc phục lỗ hổng SQL Injection trong đoạn mã được cung cấp, bạn nên sử dụng các truy vấn tham số hóa, còn được gọi là prepared statements. Phương pháp này đảm bảo rằng các đầu vào của người dùng được xử lý an toàn, ngăn chặn kẻ tấn công chèn mã SQL độc hại.\nDưới đây là một ví dụ về cách khắc phục đoạn mã này. Đảm bảo lưu tệp trước khi chạy lại quá trình quét.\ndef execute_query_compliant(request):\rimport sqlite3\rname = request.GET.get(\u0026#34;name\u0026#34;)\rquery = \u0026#34;SELECT * FROM Users WHERE name = ?\u0026#34;\rwith sqlite3.connect(\u0026#34;example.db\u0026#34;) as connection:\rcursor = connection.cursor()\rcursor.execute(query, (name,)) # Use a parameterized query\rconnection.commit()\rconnection.close() 7. Thử khắc phục vấn đề và chạy lại quá trình quét.\n"
},
{
	"uri": "//localhost:1313/vi/3-prompt-library/2-create-security-prompt-library/",
	"title": "Tạo Security Prompt Library",
	"tags": [],
	"description": "",
	"content": "Bây giờ chúng ta sẽ tạo một thư viện prompt chuyên biệt cho security analysis. Các prompt này sẽ giúp chuẩn hóa quá trình đánh giá bảo mật và đảm bảo phát hiện đầy đủ các vulnerabilities.\nTạo Prompt Multi-Vulnerability-Scan Trong IDE của bạn, mở cửa sổ chat Amazon Q.\nGõ @, và chọn Prompts.\nHình 1: Chọn Prompts trong cửa sổ chat với Amazon Q\nChọn Create a new prompt. Hình 2: Tạo prompt mới\nỞ Prompt name, nhập tên prompt như sau Multi-Vulnerability-Scan và nhấn Enter. Hình 3: Đặt tên cho prompt mới\nAmazon Q sẽ tạo một file prompt tên Multi-Vulnerability-Scan.md trong thư mục ~/.aws/amazonq/prompts, và mở file này trong IDE của bạn.\nTrong file prompt, thêm nội dung chi tiết như sau: Scan Python Flask application for these vulnerabilities:\r- SQL injection in database queries\r- Open redirect in route handlers\r- Command injection in subprocess calls\r- Path traversal in file operations\r- Privilege escalation in access controls\r- Hardcoded credentials and API keys\rReport: vulnerability type, line number, risk level, exploit scenario, secure code fix. Lưu file prompt. Tạo Prompt Database-Security-Check Lặp lại các bước trên với tên prompt là Database-Security-Check và nội dung sau:\nFocus on database security issues:\r- SQL injection via string concatenation\r- Unsafe query construction\r- Missing parameterized queries\r- Database credential exposure\rProvide secure SQLite/PostgreSQL examples. Tạo Prompt Web-App-Security-Audit Tạo thêm một prompt tên Web-App-Security-Audit với nội dung sau:\nAudit Flask web application for:\r- Unvalidated redirects\r- Command injection via user input\r- File path manipulation\r- Missing input sanitization\r- Unsafe subprocess execution\rInclude Flask security best practices. Sử Dụng Security Prompts Trong IDE của bạn, mở cửa sổ chat Amazon Q.\nGõ @, và chọn Prompts.\nChọn prompt đã lưu, ví dụ Multi-Vulnerability-Scan.\n(Tùy chọn) Trong ô chat, bạn có thể thêm chi tiết hoặc ngữ cảnh nếu cần. Ví dụ:\n@Multi-Vulnerability-Scan analyze the @vulnerable_app.py using the files in the @security-test folder Gửi prompt và chờ Amazon Q trả về kết quả. Hình 4: Sử dụng prompt bảo mật để kiểm tra lỗ hổng với Amazon Q\nThư viện security prompt của bạn đã sẵn sàng để kiểm thử vulnerabilities toàn diện ở phần tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/3-improper-privilege-management/",
	"title": "Improper Privilege Management",
	"tags": [],
	"description": "",
	"content": "Leo thang đặc quyền xảy ra khi một người dùng độc hại khai thác một lỗi (bug), lỗ hổng thiết kế hoặc lỗi cấu hình trong một ứng dụng hoặc hệ điều hành để giành được quyền truy cập cao hơn vào hệ thống. Các đặc quyền nâng cao có thể được sử dụng để xóa tệp, xem thông tin riêng tư hoặc cài đặt các chương trình hoặc backdoor không mong muốn.\n1. Sao chép đoạn mã sau vào IDE của bạn.\ndef set_user_noncompliant():\rimport os\rroot = 0\r# Noncompliant: the process user is set to root.\ros.setuid(root) 2. Nhấp vào Amazon Q trên thanh trạng thái và chạy Project Scan để xem cách phát hiện Lỗ hổng Quản lý Đặc quyền Không Đúng cách. Hình 1: Chạy quét dự án với Amazon Q Developer\n3. Chọn Review workspace or Review active file Hình 2: Chọn quét toàn bộ workspace hoặc file đang mở\n4. Phát hiện sau sẽ hiển thị trên thanh trạng thái Hình 3: Kết quả phát hiện lỗ hổng hiển thị trên thanh trạng thái\n5. Để xem chi tiết các phát hiện, giữ con trỏ chuột trên đoạn mã không an toàn và nhấp vào \u0026ldquo;View Details\u0026rdquo; để tìm hiểu thêm: Hình 4: Di chuột lên mã không an toàn để xem chi tiết Hình 5: Thông tin chi tiết về lỗ hổng bảo mật\n6. Nên tránh chạy các tiến trình với quyền root bất cứ khi nào có thể vì nó có thể dẫn đến các lỗ hổng bảo mật nghiêm trọng, bao gồm truy cập trái phép, leo thang đặc quyền và khả năng hệ thống bị xâm nhập.\nLuôn tuân theo nguyên tắc đặc quyền tối thiểu, nghĩa là các tiến trình chỉ nên chạy với các quyền tối thiểu cần thiết để thực hiện các tác vụ được yêu cầu của chúng. Điều này làm giảm rủi ro và tác động tiềm ẩn của một cuộc tấn công bảo mật.\nDưới đây là một ví dụ về cách khắc phục đoạn mã này. Đảm bảo lưu tệp trước khi chạy lại quá trình quét.\ndef set_user_compliant():\rimport os\rroot = 4\r# Compliant: the process user is set to userid 4.\ros.setuid(root) 7. Thử khắc phục vấn đề và chạy lại quá trình quét.\n"
},
{
	"uri": "//localhost:1313/vi/3-prompt-library/3-test-security-prompts/",
	"title": "Kiểm tra Security Prompt",
	"tags": [],
	"description": "",
	"content": "Bây giờ khi chúng ta đã tạo xong vulnerable code samples và thư viện security prompt, hãy kiểm tra xem Amazon Q Developer có thể phát hiện các security issues hiệu quả như thế nào với các chiến lược prompt khác nhau.\nTesting Different Prompt Approaches 1. General Security Review\nSử dụng security prompt tổng quát để quét một file:\n@Multi-Vulnerability-Scan @vulnerable_app.py Hình 1: Thực hiện đánh giá bảo mật tổng quát trên một file\nPurpose: Thực hiện phân tích bảo mật tổng thể, bao phủ cả 6 loại vulnerability chỉ trong một lần quét. Expected Output: Tổng quan về tất cả các vulnerabilities cùng với các gợi ý khắc phục cơ bản. 2. Specialized Database Security Check\nTập trung kiểm tra các vulnerabilities liên quan đến database:\n@Database-Security-Check @vulnerable_app.py @file_handler.py Hình 2: Thực hiện kiểm tra bảo mật chuyên sâu cho database\nPurpose: Phân tích sâu về các vấn đề SQL injection và credential exposure. Expected Output: Phân tích chi tiết về database security kèm ví dụ cho SQLite/PostgreSQL. 3. Web Application Security Audit\nTập trung vào các vulnerabilities đặc thù của web application:\n@Web-App-Security-Audit @vulnerable_app.py Hình 3: Thực hiện đánh giá bảo mật ứng dụng web\nPurpose: Nhấn mạnh các vấn đề bảo mật riêng cho Flask như redirects và command injection. Expected Output: Đưa ra best practices về web security cùng các giải pháp khắc phục cho Flask. 4. Comprehensive Multi-File Analysis\nPhân tích đồng thời tất cả các file có lỗ hổng:\n@Multi-Vulnerability-Scan @vulnerable_app.py @file_handler.py @auth_service.py Hình 4: Thực hiện phân tích bảo mật toàn diện trên nhiều file\nPurpose: Đánh giá bảo mật toàn diện trên toàn bộ codebase.\nExpected Output: Báo cáo tổng hợp, thể hiện mối liên hệ giữa các vulnerabilities ở nhiều file.\nTiêu chí đánh giá chất lượng Với mỗi phát hiện về security, kiểm tra xem Amazon Q có cung cấp:\n✅ Exact line number và đoạn code gây lỗi ✅ Severity level (Critical/High/Medium/Low) ✅ Exploitation scenario giải thích rủi ro bảo mật ✅ Secure remediation với ví dụ code đã sửa an toàn ✅ Prevention best practices để phòng tránh lỗi tương tự So sánh hiệu quả của các prompt Sau khi test tất cả các scenario, hãy so sánh kết quả:\nGeneral prompts cho coverage rộng nhưng có thể thiếu chiều sâu Specialized prompts cung cấp phân tích chi tiết cho từng loại vulnerability Multi-file scans giúp phát hiện các mối liên hệ và phụ thuộc về bảo mật giữa nhiều file "
},
{
	"uri": "//localhost:1313/vi/3-prompt-library/",
	"title": "Security Prompt Library",
	"tags": [],
	"description": "",
	"content": "Bạn có thể xây dựng một thư viện các prompt thường dùng để sử dụng khi trò chuyện với Amazon Q trong IDE. Bằng cách lưu các prompt này vào thư viện, bạn có thể dễ dàng chèn chúng vào cuộc trò chuyện mà không cần phải nhập lại mỗi lần. Bạn có thể sử dụng các prompt đã lưu cho nhiều cuộc hội thoại và dự án khác nhau.\nCác prompt được lưu trong thư mục ~/.aws/amazonq/prompts.\nTại sao nên sử dụng Security Prompt Library? Trong workshop secure code này, prompt library giúp:\nPhân tích nhất quán 6 loại lỗ hổng chính Tiết kiệm thời gian thiết lập cho từng bài lab Đảm bảo chất lượng đánh giá bảo mật Tập trung vào khắc phục thay vì viết prompt Lợi ích của việc Chuẩn hóa Security Prompt Đối với Developer cá nhân\nĐánh giá bảo mật nhanh hơn với các prompt đã được xây dựng và kiểm thử Đảm bảo bao phủ đầy đủ, không bỏ sót loại lỗ hổng nào Công cụ học tập để hiểu các thực tiễn bảo mật tốt nhất Đảm bảo chất lượng nhất quán trong đánh giá bảo mật Đối với nhóm Development\nChia sẻ tiêu chuẩn bảo mật cho tất cả thành viên Hỗ trợ onboarding nhanh cho developer mới Đánh giá code nhất quán với cùng tiêu chí bảo mật Chia sẻ kiến thức qua các thực tiễn bảo mật đã được ghi nhận Đối với Tổ chức\nQuy trình bảo mật có thể mở rộng cho nhiều dự án Lưu vết kiểm tra các đánh giá bảo mật đã thực hiện Hỗ trợ tuân thủ với các đánh giá bảo mật được ghi nhận Giảm rủi ro nhờ phát hiện lỗ hổng có hệ thống Kết thúc phần này, bạn sẽ có một thư viện security prompt toàn diện có thể sử dụng cho tất cả dự án phát triển, giúp duy trì tiêu chuẩn bảo mật nhất quán và tăng tốc phát hiện lỗ hổng.\n"
},
{
	"uri": "//localhost:1313/vi/4-conclusion/",
	"title": "Kết luận và Bước tiếp theo",
	"tags": [],
	"description": "",
	"content": "Tóm tắt Trong workshop này, chúng ta đã học cách sử dụng Amazon Q Developer để phát hiện các vi phạm chính sách bảo mật và lỗ hổng trong mã nguồn thông qua kiểm thử bảo mật ứng dụng tĩnh (SAST), phát hiện secrets, phân tích thành phần phần mềm và quét Infrastructure as Code (IaC). Các lần quét bảo mật của Amazon Q Developer không chỉ xác định lỗ hổng mà còn đề xuất cải tiến để nâng cao chất lượng và bảo mật mã nguồn của bạn.\nLợi ích khi bảo mật code của bạn với Amazon Q Developer Tích hợp Amazon Q Developer trực tiếp vào môi trường phát triển, đặc biệt là trong IDE, mang lại nhiều lợi ích quan trọng:\nPhát hiện theo thời gian thực: Developer nhận được phản hồi ngay lập tức về các lỗ hổng, vi phạm tiêu chuẩn mã hóa và lỗi cú pháp khi viết mã, giúp học hỏi và sửa lỗi ngay tại chỗ.\nPhát hiện lỗ hổng sớm: Phát hiện vấn đề sớm giúp giảm chi phí và công sức khắc phục, thường trước khi merge code hoặc triển khai. Thực hành mã hóa an toàn hơn: Các đề xuất khắc phục giúp developer liên tục áp dụng các thực tiễn lập trình bảo mật tốt nhất. Giảm thời gian khắc phục: Xử lý vấn đề bảo mật ngay trong quá trình phát triển nhanh hơn và tiết kiệm chi phí hơn so với sửa sau khi triển khai. Tài nguyên học tập \u0026amp; cộng đồng Tài liệu \u0026amp; hướng dẫn AWS: https://aws.amazon.com/codeguru/ OWASP Top Ten: https://owasp.org/www-project-top-ten/ Blog bảo mật AWS \u0026amp; Diễn đàn Developer để cập nhật và hỗ trợ cộng đồng. Hướng phát triển nâng cao \u0026amp; tích hợp bảo mật sâu Tích hợp Amazon Q Developer với pipeline CI/CD để kiểm tra bảo mật tự động. Kết hợp với AWS Security Hub và Amazon Inspector để bảo mật đám mây toàn diện. Sử dụng quét IaC để bảo vệ các template hạ tầng đám mây. Tùy chỉnh thư viện prompt phù hợp với quy trình làm việc của nhóm. Tài liệu tham khảo Amazon Q Developer Security Scans Amazon Q Developer Code Reviews Saving prompts to a library for use with Amazon Q Developer chat Code Security Scanning with Amazon Q Developer Amazon Q Developer Context Features Secure Coding with Amazon Q AWS Well-Architected Security Pillar AWS Security Best Practices AWS Prescriptive Guidance: Security OWASP Top 10 Web Application Security Risks Securing Your Code Workshop Amazon Q Developer Pricing CodeGuru Detector Library Hãy tiếp tục thực hành với Amazon Q Developer và tận dụng AI để không ngừng nâng cao kỹ năng lập trình và bảo mật của bạn. Cảm ơn bạn đã tham gia và hãy tiếp tục hành trình xây dựng các ứng dụng an toàn, vững chắc hơn!\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/4-path-traversal/",
	"title": "Path Traversal",
	"tags": [],
	"description": "",
	"content": "Việc xây dựng tên đường dẫn với đầu vào không được làm sạch của người dùng có thể dẫn đến các cuộc tấn công path traversal (duyệt đường dẫn) (ví dụ: ../../../). Loại tấn công này khai thác việc xác thực/làm sạch không đầy đủ các tên tệp do người dùng cung cấp, cho phép kẻ tấn công truy cập các tệp hoặc thư mục không được phép truy cập. Điều này có thể dẫn đến truy cập trái phép, tiết lộ thông tin và thậm chí xâm nhập hệ thống.\n1. Sao chép đoạn mã sau vào IDE của bạn.\ndef verify_file_path_noncompliant():\rfrom flask import request\rfile_path = request.args[\u0026#34;file\u0026#34;]\r# Noncompliant: user input file path is not sanitized.\rfile = open(file_path)\rfile.close() 2. Nhấp vào Amazon Q trên thanh trạng thái và chạy Project Scan để xem cách phát hiện Lỗ hổng Path Traversal. Hình 1: Chạy quét dự án với Amazon Q Developer\n3. Phát hiện sau sẽ hiển thị trên thanh trạng thái Hình 2: Kết quả phát hiện lỗ hổng path traversal hiển thị trên thanh trạng thái\n4. Để xem chi tiết các phát hiện, giữ con trỏ chuột trên đoạn mã không an toàn và nhấp vào \u0026ldquo;View Details\u0026rdquo; để tìm hiểu thêm: Hình 3: Xem thông tin chi tiết về lỗ hổng path traversal\n5. Các lỗ hổng path traversal có thể được giảm thiểu bằng cách làm sạch đầu vào của người dùng trước khi sử dụng nó để xây dựng đường dẫn tệp. Cách tiếp cận này bao gồm việc kiểm tra xem đường dẫn tệp do người dùng cung cấp có nằm trong danh sách các đường dẫn được phép xác định trước hay không.\nDưới đây là một ví dụ về cách khắc phục đoạn mã này. Đảm bảo lưu tệp trước khi chạy lại quá trình quét.\ndef verify_file_path_compliant():\rfrom flask import request\rbase_path = \u0026#34;/var/data/images/\u0026#34;\rfile_path = request.args[\u0026#34;file\u0026#34;]\rallowed_path = [\u0026#34;example_path1\u0026#34;, \u0026#34;example_path2\u0026#34;]\r# Compliant: user input file path is sanitized.\rif file_path in allowed_path:\rfile = open(base_path + file_path)\rfile.close() 6. Thử khắc phục vấn đề và chạy lại quá trình quét.\n"
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/5-os-command-injection/",
	"title": "OS Command Injection",
	"tags": [],
	"description": "",
	"content": "Việc xây dựng các lệnh hệ điều hành hoặc shell với đầu vào không được làm sạch của người dùng có thể dẫn đến vô tình chạy mã độc hại. Loại lỗ hổng này cho phép kẻ tấn công thực thi các lệnh tùy ý trên hệ điều hành máy chủ với các đặc quyền của ứng dụng dễ bị tấn công. Các cuộc tấn công command injection có thể dẫn đến nhiều kết quả độc hại, bao gồm truy cập dữ liệu trái phép, hỏng dữ liệu, từ chối dịch vụ và xâm nhập hệ thống hoàn toàn.\n1. Sao chép đoạn mã sau vào IDE của bạn.\ndef exec_command_noncompliant():\rfrom paramiko import client\rfrom flask import request\raddress = request.args.get(\u0026#34;address\u0026#34;)\rcmd = \u0026#34;ping -c 1 %s\u0026#34; % address\rclient = client.SSHClient()\rclient.connect(\u0026#34;ssh.samplehost.com\u0026#34;)\r# Noncompliant: address argument is not sanitized.\rclient.exec_command(cmd) 2. Chạy Amazon Q Project Scan để xem cách phát hiện lỗ hổng OS command injection. Hình 1: Chạy quét dự án để phát hiện lỗ hổng OS command injection\n3. Để xem chi tiết các phát hiện, giữ con trỏ chuột trên đoạn mã không an toàn và nhấp vào \u0026ldquo;View Details\u0026rdquo; để tìm hiểu thêm: Hình 2: Xem thông tin chi tiết về lỗ hổng OS command injection\n4. Bất cứ khi nào có thể, hãy tránh xây dựng các lệnh shell với đầu vào của người dùng. Sử dụng các API hoặc thư viện dành riêng cho ngôn ngữ được thiết kế để thực hiện các hành động cần thiết mà không cần gọi shell.\nXác thực và Làm sạch Đầu vào: Nếu bạn phải bao gồm đầu vào của người dùng trong một lệnh shell, hãy xác thực nghiêm ngặt đầu vào để đảm bảo nó tuân thủ các định dạng dự kiến (ví dụ: chỉ chữ và số). Làm sạch đầu vào bằng cách thoát hoặc loại bỏ các ký tự có khả năng gây nguy hiểm.\nDưới đây là một ví dụ về cách khắc phục đoạn mã này. Đảm bảo lưu tệp trước khi chạy lại quá trình quét.\nfrom paramiko import SSHClient, AutoAddPolicy\rimport os\rimport shlex\rdef exec_command_compliant():\r# Retrieve SSH credentials and server details from environment variables\rssh_host = os.getenv(\u0026#39;SSH_HOST\u0026#39;, \u0026#39;default_host\u0026#39;)\rssh_username = os.getenv(\u0026#39;SSH_USERNAME\u0026#39;, \u0026#39;default_username\u0026#39;)\rssh_password = os.getenv(\u0026#39;SSH_PASSWORD\u0026#39;, \u0026#39;default_password\u0026#39;)\r# Get the address from the request\u0026#39;s query parameters\rfrom flask import request\raddress = request.args.get(\u0026#34;address\u0026#34;)\r# Sanitize the address argument to prevent command injection\rsafe_address = shlex.quote(address)\r# Prepare the ping command with the sanitized address\rcmd = f\u0026#34;ping -c 1 {safe_address}\u0026#34;\r# Initialize the SSH client and connect to the remote host\rclient = SSHClient()\rclient.load_system_host_keys()\r# Use environment variables for credentials\rclient.connect(ssh_host, username=ssh_username, password=ssh_password)\r# Execute the command on the remote server\rstdin, stdout, stderr = client.exec_command(cmd)\routput = stdout.read().decode()\r# Close the SSH connection\rclient.close()\r# Return or process the command\u0026#39;s output\rreturn output "
},
{
	"uri": "//localhost:1313/vi/2-hands-on-vulnerability-detection/6-aws-credentials-logged/",
	"title": "AWS credentials logged",
	"tags": [],
	"description": "",
	"content": "Trong lỗ hổng này, các thông tin đăng nhập AWS chưa được mã hóa có thể bị ghi nhật ký, điều này có thể làm lộ các thông tin đăng nhập đó cho kẻ tấn công. Mã hóa dữ liệu nhạy cảm, chẳng hạn như thông tin đăng nhập, trước khi chúng được ghi nhật ký để làm cho mã an toàn hơn.\n1. Sao chép đoạn mã sau vào IDE của bạn.\ndef log_credentials_noncompliant():\rimport boto3\rimport logging\rsession = boto3.Session()\rcredentials = session.get_credentials()\rcredentials = credentials.get_frozen_credentials()\raccess_key = credentials.access_key\rsecret_key = credentials.secret_key\r# Noncompliant: credentials are written to the logger.\rlogging.info(\u0026#39;Access key: \u0026#39;, access_key)\rlogging.info(\u0026#39;secret access key: \u0026#39;, secret_key) 2. Chạy Amazon Q Project Scan để xem cách phát hiện lỗ hổng này. Hình 1: Chạy quét dự án để phát hiện việc ghi log thông tin xác thực\n3. Để xem chi tiết các phát hiện, giữ con trỏ chuột trên đoạn mã không an toàn và nhấp vào \u0026ldquo;View Details\u0026rdquo; để tìm hiểu thêm: Hình 2: Xem thông tin chi tiết về lỗ hổng ghi log thông tin xác thực\n4. Tránh ghi nhật ký thông tin nhạy cảm như khóa truy cập hoặc khóa bí mật. Để quản lý quyền truy cập tài nguyên AWS, hãy ưu tiên sử dụng vai trò IAM hơn là khóa truy cập và khóa bí mật tĩnh, đặc biệt đối với các ứng dụng chạy trên các dịch vụ AWS như EC2, Lambda, v.v. Vai trò IAM cung cấp thông tin đăng nhập tạm thời được AWS tự động quản lý.\nDưới đây là một ví dụ về cách khắc phục đoạn mã này. Đảm bảo lưu tệp trước khi chạy lại quá trình quét.\ndef log_credentials_compliant():\rimport boto3\rsession = boto3.Session()\rcredentials = session.get_credentials()\rcredentials = credentials.get_frozen_credentials()\raccess_key = credentials.access_key\rsecret_key = credentials.secret_key\r# Compliant: avoids writing credentials to the logger.\rsession = boto3.Session(\raws_access_key_id=access_key,\raws_secret_access_key=secret_key\r) "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]