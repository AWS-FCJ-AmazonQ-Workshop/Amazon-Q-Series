[
{
	"uri": "//localhost:1313/vi/1-open-redirect-vulnerability/",
	"title": "Open Redirect Vulnerability",
	"tags": [],
	"description": "",
	"content": "Open Redirect Vulnerability is an security weakness where an attacker could supply a malicious URL as an input, potentially leading users to phishing or malware sites. This is a common security flaw in web applications that can be exploited to conduct phishing attacks or distribute malware.\nCreate a folder, before create a file .py and paste code into\nfrom flask import app\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url_noncompliant():\rfrom flask import request, redirect\rendpoint = request.args[\u0026#39;url\u0026#39;]\r# Noncompliant: redirect to a user-supplied URL without sanitization.\rreturn redirect(endpoint) Click on Amazon Q in the status bar and run Project Scan to see how the Open Redirect Vulnerability is detected. Select Review workspace or Review active file The following finding will be visible in the status bar To views details of the findings, hold your cursor over the insecure code and click on \u0026ldquo;View Details\u0026rdquo; to learn more: To fix the open redirect issue in the provided code snippet, you should validate and/or sanitize the URL before performing the redirection. For example, only allow redirects to known, safe domains by checking the user-supplied URL against a whitelist.\nBelow is an example of how this code can be fixed. Make sure to save the file prior to re-running the scan.\nfrom flask import Flask, request, redirect, url_for\rapp = Flask(__name__)\rALLOWED_HOSTS = [\u0026#39;www.example.com\u0026#39;, \u0026#39;example.org\u0026#39;]\r@app.route(\u0026#39;/redirect\u0026#39;)\rdef redirect_url():\rfrom urllib.parse import urlparse\r# Retrieve the URL from request arguments and parse it\ruser_url = request.args.get(\u0026#39;url\u0026#39;, \u0026#39;\u0026#39;)\rparsed_url = urlparse(user_url)\r# Check if the URL\u0026#39;s host is in the list of allowed hosts\rif parsed_url.netloc in ALLOWED_HOSTS:\rreturn redirect(user_url)\relse:\r# Redirect to a default page or show an error\rreturn redirect(url_for(\u0026#39;index\u0026#39;)) # Assume \u0026#39;index\u0026#39; is a valid endpoint Try fixing the issue and running the scan again. "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Khả năng quan sát với Amazon ECS",
	"tags": [],
	"description": "",
	"content": "Observability with Amazon ECS Khả năng quan sát là khả năng liên tục tạo và khám phá những thông tin chi tiết hữu ích dựa trên các tín hiệu từ hệ thống đang được theo dõi. Nói cách khác, khả năng quan sát cho phép người dùng hiểu được trạng thái của hệ thống từ các đầu ra bên ngoài của nó và thực hiện các hành động phù hợp. Ba trụ cột của khả năng quan sát là số liệu (metrics), nhật ký (logs) và dấu vết (traces):\nSố liệu (Metrics) Số liệu biểu diễn dữ liệu số được đo lường theo các khoảng thời gian. Chúng tận dụng mô hình hóa và dự đoán toán học để hiểu hành vi của hệ thống ở cả hiện tại và tương lai. Chúng hữu ích để xác định xu hướng và cho phép mô hình hóa và dự đoán toán học. Nhật ký (Logs) Nhật ký bao gồm các bản ghi được đánh dấu thời gian, bất biến, ghi lại các sự kiện rời rạc khi chúng xảy ra theo thời gian. Chúng có giá trị trong việc phát hiện các hành vi mới nổi và khó lường. Chúng đặc biệt hữu ích để khám phá các mô hình hành vi mới nổi và khó lường. Dấu vết (Traces) Dấu vết mô tả một chuỗi các sự kiện phân tán, liên kết với nhau, vạch ra hành trình đầu cuối của một yêu cầu thông qua một hệ thống phân tán. Chúng cung cấp thông tin chi tiết, chẳng hạn như độ trễ, về đường đi của một yêu cầu và cấu trúc của nó. Chúng cung cấp khả năng hiển thị cả đường đi mà một yêu cầu đã đi qua cũng như cấu trúc của một yêu cầu. Tóm lại, chúng ta có thể chia khả năng quan sát thành ba thành phần chính: CloudWatch Metrics, CloudWatch Logs và AWS X-Ray. Cùng nhau, chúng tạo thành một giải pháp khả năng quan sát toàn diện trên AWS, bao gồm giám sát số liệu, quản lý nhật ký và theo dõi phân tán. Các trụ cột này phối hợp với nhau để cung cấp cho người dùng những hiểu biết sâu sắc về hành vi, hiệu suất và độ tin cậy của môi trường và ứng dụng AWS của họ.\n"
},
{
	"uri": "//localhost:1313/vi/2-sql-injection/",
	"title": "Tiers of service for Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": "When you use Amazon Q Developer, you either use Amazon Q Developer Pro, which is a paid subscription service, or you use Amazon Q Developer at the Free tier. Review the following information to understand what\u0026rsquo;s offered at each tier.\nAmazon Q Developer Pro tier – The Pro tier is a paid version of the Amazon Q Developer service. This gives you access to advanced features, such as customization, as well as higher usage limits. To use Amazon Q Developer Pro, you must be a user in IAM Identity Center, and your administrator must subscribe you to Amazon Q Developer Pro.\nAmazon Q Developer Free tier – Amazon Q Developer offers a perpetual Free tier with monthly limits, including for users authenticating with AWS Builder ID. The features available to you depends on your interface and on how you authenticate.\nFor more information about pricing tiers and feature availability, see the Amazon Q Developer pricing page.\n"
},
{
	"uri": "//localhost:1313/vi/3-improper-privilege-management/",
	"title": "Using Amazon Q Developer on the command line",
	"tags": [],
	"description": "",
	"content": "You can use Amazon Q Developer to enable completions for hundreds of popular CLIs like git, npm, docker, and aws. Amazon Q for command line integrates contextual information, providing Amazon Q with an enhanced understanding of your use case, enabling it to provide relevant and context-aware responses. As you begin typing, Amazon Q populates contextually relevant subcommands, options, and arguments.\nYou can install Amazon Q for command line on macOS and specific Linux environments, including AppImage and Ubuntu packages, which provides features such as autocompletion, Amazon Q chat, and inline zsh completion. You can work with Amazon Q CLI to do the following:\nCommand line interface to chat through natural language conversations, questions, and responses within your terminal environment.\nTranslate natural language instructions to executable shell code snippets.\nInline suggestions as you type in your command prompt, with completions to popular CLIs.\n"
},
{
	"uri": "//localhost:1313/vi/7-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Tóm lại, khả năng quan sát đóng vai trò là một năng lực quan trọng đối với các hệ thống hiện đại và phức tạp. Nó trao quyền cho chúng ta vượt xa việc giám sát đơn thuần bằng cách liên tục tạo ra và cho phép khám phá các thông tin chi tiết hữu ích có được từ các tín hiệu hệ thống. Điều này cho phép hiểu sâu sắc về trạng thái bên trong của hệ thống thông qua các biểu hiện bên ngoài của nó, tạo điều kiện cho các can thiệp sáng suốt và kịp thời.\nBa trụ cột nền tảng của khả năng quan sát – số liệu (metrics), nhật ký (logs) và dấu vết (traces) – mỗi trụ cột đóng góp một cách độc đáo vào sự hiểu biết này:\nMetrics cung cấp dữ liệu định lượng theo chuỗi thời gian, rất cần thiết cho việc xác định xu hướng, lập kế hoạch dung lượng và phân tích dự đoán. Logs cung cấp các bản ghi bất biến, được đánh dấu thời gian về các sự kiện rời rạc, chứng tỏ vô giá trong việc chẩn đoán các hành vi mới nổi và khó lường. Traces map the end-to-end journey của các yêu cầu trên các hệ thống phân tán, tiết lộ các điểm nghẽn về độ trễ và luồng hoạt động phức tạp. Trên nền tảng AWS, các trụ cột này được giải quyết một cách toàn diện thông qua CloudWatch Metrics, CloudWatch Logs và AWS X-Ray. Hoạt động đồng bộ, các dịch vụ này tạo thành một giải pháp khả năng quan sát mạnh mẽ, cung cấp khả năng hiển thị sâu sắc về hành vi, hiệu suất và độ tin cậy tổng thể của môi trường AWS và các ứng dụng mà chúng lưu trữ. Bằng cách tận dụng hiệu quả các công cụ này, người dùng có thể chủ động quản lý hệ thống của mình, tối ưu hóa hiệu suất và đảm bảo một bối cảnh vận hành linh hoạt và đáng tin cậy.\nCác Bước Tiếp Theo Tiếp tục hành trình học tập Amazon ECS của bạn bằng cách khám phá các module workshop chuyên biệt sau:\nAuto Scaling - Tìm hiểu cách tự động điều chỉnh quy mô ứng dụng của bạn một cách linh hoạt Networking - Nắm vững các khái niệm và cách triển khai mạng trong ECS Observability - Triển khai các giải pháp giám sát toàn diện Security - Triển khai các biện pháp kiểm soát bảo mật mạnh mẽ và các phương pháp hay nhất Automation - Tối ưu hóa quy trình triển khai Storage - Tích hợp Amazon EFS cho lưu trữ bền bỉ Mỗi module cung cấp trải nghiệm thực hành chi tiết để giúp bạn xây dựng các ứng dụng ECS sẵn sàng cho môi trường production.\nNgười đóng góp Lê Minh Nghĩa - https://www.linkedin.com/in/minhnghia2k3/\nTrần Đoàn Công Lý - https://www.linkedin.com/in/trandoancongly/\nTài liệu tham khảo Container Insights OpenTelemetry "
},
{
	"uri": "//localhost:1313/vi/4-path-traversal/",
	"title": "Using Amazon Q Developer on the command line",
	"tags": [],
	"description": "",
	"content": "You can use Amazon Q Developer to enable completions for hundreds of popular CLIs like git, npm, docker, and aws. Amazon Q for command line integrates contextual information, providing Amazon Q with an enhanced understanding of your use case, enabling it to provide relevant and context-aware responses. As you begin typing, Amazon Q populates contextually relevant subcommands, options, and arguments.\nYou can install Amazon Q for command line on macOS and specific Linux environments, including AppImage and Ubuntu packages, which provides features such as autocompletion, Amazon Q chat, and inline zsh completion. You can work with Amazon Q CLI to do the following:\nCommand line interface to chat through natural language conversations, questions, and responses within your terminal environment.\nTranslate natural language instructions to executable shell code snippets.\nInline suggestions as you type in your command prompt, with completions to popular CLIs.\n"
},
{
	"uri": "//localhost:1313/vi/5-os-command-injection/",
	"title": "Using Amazon Q Developer on the command line",
	"tags": [],
	"description": "",
	"content": "You can use Amazon Q Developer to enable completions for hundreds of popular CLIs like git, npm, docker, and aws. Amazon Q for command line integrates contextual information, providing Amazon Q with an enhanced understanding of your use case, enabling it to provide relevant and context-aware responses. As you begin typing, Amazon Q populates contextually relevant subcommands, options, and arguments.\nYou can install Amazon Q for command line on macOS and specific Linux environments, including AppImage and Ubuntu packages, which provides features such as autocompletion, Amazon Q chat, and inline zsh completion. You can work with Amazon Q CLI to do the following:\nCommand line interface to chat through natural language conversations, questions, and responses within your terminal environment.\nTranslate natural language instructions to executable shell code snippets.\nInline suggestions as you type in your command prompt, with completions to popular CLIs.\n"
},
{
	"uri": "//localhost:1313/vi/6-aws-credentials-logged/",
	"title": "Using Amazon Q Developer on the command line",
	"tags": [],
	"description": "",
	"content": "You can use Amazon Q Developer to enable completions for hundreds of popular CLIs like git, npm, docker, and aws. Amazon Q for command line integrates contextual information, providing Amazon Q with an enhanced understanding of your use case, enabling it to provide relevant and context-aware responses. As you begin typing, Amazon Q populates contextually relevant subcommands, options, and arguments.\nYou can install Amazon Q for command line on macOS and specific Linux environments, including AppImage and Ubuntu packages, which provides features such as autocompletion, Amazon Q chat, and inline zsh completion. You can work with Amazon Q CLI to do the following:\nCommand line interface to chat through natural language conversations, questions, and responses within your terminal environment.\nTranslate natural language instructions to executable shell code snippets.\nInline suggestions as you type in your command prompt, with completions to popular CLIs.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]